#include "codegen/mem_direct.hpp"

namespace picker { namespace codegen {

    static const std::string yaml_varible_info =
        "    VariableInfo {{var_hash}} = {\"{{var_name}}\", \"{{var_type}}\", {{var_width}}, {{var_array_size}}, (uint64_t)&(base.{{var_raw_name}}) - (uint64_t)&base };\n"
        "    {{var_hash}}.write_yaml();\n";

    std::string replace_dot(const std::string &varName)
    {
        // __DOT__ -> .  , fast mode
        std::string out;
        out.reserve(varName.size());
        for (size_t i = 0; i < varName.size(); i++) {
            if (i + 6 < varName.size() && varName[i] == '_' && varName[i + 1] == '_' && varName[i + 2] == 'D'
                && varName[i + 3] == 'O' && varName[i + 4] == 'T' && varName[i + 5] == '_' && varName[i + 6] == '_') {
                out.push_back('.');
                i += 6;
            } else {
                out.push_back(varName[i]);
            }
        }
        return out;
    }

    void generate_offset(const std::vector<VariableInfo> &varibles, std::string &offset_codes)
    {
        inja::Environment env;
        nlohmann::json data;

        for (auto &var : varibles) {
            // calc hash from name
            data["var_hash"]       = "hash_" + std::to_string(std::hash<std::string>{}(var.name));
            data["var_raw_name"]   = var.name;
            data["var_name"]       = replace_dot(var.name);
            data["var_type"]       = var.type;
            data["var_width"]      = var.width;
            data["var_array_size"] = var.array_size;
            offset_codes += env.render(yaml_varible_info, data);
        }
    }

    void render_md_addr_generator(const std::vector<VariableInfo> &varibles, picker::export_opts &opts)
    {
        if (varibles.size() == 0) { return; }
        inja::Environment env;
        nlohmann::json data;
        std::string offset_codes = "  generated by codegen\n";
        std::string src_dir      = opts.source_dir; // "mem_direct" folder has been added in the upper level
        std::string dst_dir      = opts.target_dir;
        generate_offset(varibles, offset_codes);
        data["__TOP_MODULE_NAME__"]   = opts.source_module_name_list[0];
        data["__yaml_varible_info__"] = offset_codes;
        recursive_render(src_dir, dst_dir, data, env);
    }

}}; // namespace picker::codegen